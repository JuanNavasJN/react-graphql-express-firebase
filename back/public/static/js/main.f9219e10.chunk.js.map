{"version":3,"sources":["querys.js","components/Footer.js","components/Header.js","components/Todo.js","components/Main.js","App.js","components/Login.js","serviceWorker.js","index.js"],"names":["TODO_LIST_QUERY","gql","USERS_QUERY","USER_QUERY","ADD_USER_MUTATION","CREATE_TODO_MUTATION","TOGGLE_TODO_MUTATION","DELETE_TODO_MUTATION","ADD_USER_TO_TODO_MUTATION","REMOVE_USER_TODO_MUTATION","Footer","_","data","useQuery","useState","todos","setTodos","useLocation","useEffect","todosList","items","length","className","window","location","pathname","undefined","to","Header","text","state","setState","useMutation","createTodo","onChange","target","value","onKeyPress","key","variables","completed","refetchQueries","query","placeholder","Todo","todo","toggleModal","removeTodo","toggleTodo","deleteUserOnTodo","id","checked","type","onClick","users","map","i","idx","name","user","split","toUpperCase","Main","loading","addUserToTodo","modal","setModal","allUsers","setAllUsers","currentTodoId","setCurrentTodoId","toggleAllTodos","forEach","todoId","handleClick","e","a","innerText","some","htmlFor","filter","App","isAuth","setAuth","exact","path","component","history","useHistory","email","setEmail","errors","setErrors","showName","setShowName","fullName","setFullName","password","setPassword","pass","setPass","useLazyQuery","getUser","addUser","push","logged","handleSubmit","preventDefault","console","log","onSubmit","onBlur","test","String","toLowerCase","Login","Boolean","hostname","match","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f9219e10.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const TODO_LIST_QUERY = gql`\n    query TodoList {\n        todosList(orderBy: [completed_ASC, createdAt_DESC]) {\n            items {\n                id\n                text\n                completed\n                users\n            }\n        }\n    }\n`;\n\nexport const USERS_QUERY = gql`\n    query Users {\n        users {\n            name\n        }\n    }\n`;\n\nexport const USER_QUERY = gql`\n    query GetUser($id: ID, $email: String, $password: String) {\n        user(id: $id, email: $email, password: $password) {\n            id\n            logged\n        }\n    }\n`;\n\nexport const ADD_USER_MUTATION = gql`\n    mutation addUser($data: UserInput!) {\n        addUser(data: $data) {\n            id\n        }\n    }\n`;\nexport const CREATE_TODO_MUTATION = gql`\n    mutation TodoCreate($data: TodoCreateInput!) {\n        todoCreate(data: $data) {\n            id\n            text\n            completed\n        }\n    }\n`;\n\nexport const TOGGLE_TODO_MUTATION = gql`\n    mutation TodoToggle($id: ID!, $completed: Boolean!) {\n        todoUpdate(filter: { id: $id }, data: { completed: $completed }) {\n            id\n            text\n            completed\n        }\n    }\n`;\n\nexport const DELETE_TODO_MUTATION = gql`\n    mutation TodoDelete($id: ID!) {\n        todoDelete(filter: { id: $id }) {\n            success\n        }\n    }\n`;\n\nexport const ADD_USER_TO_TODO_MUTATION = gql`\n    mutation AddUserToTodo($id: ID!, $user: String!) {\n        addUserToTodo(id: $id, user: $user) {\n            id\n        }\n    }\n`;\n\nexport const REMOVE_USER_TODO_MUTATION = gql`\n    mutation RemoveUserTodo($id: ID!, $user: String!) {\n        removeUserTodo(id: $id, user: $user) {\n            id\n        }\n    }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { TODO_LIST_QUERY } from '../querys';\n\nimport { useLocation } from 'react-router-dom';\n\nconst Footer = _ => {\n    const { data } = useQuery(TODO_LIST_QUERY);\n\n    const [todos, setTodos] = useState([]);\n\n    useLocation();\n\n    useEffect(\n        _ => {\n            if (data && data.todosList.items.length >= 0) {\n                setTodos(data.todosList.items);\n            }\n        },\n        [data]\n    );\n\n    return todos.length ? (\n        <footer className=\"footer\">\n            <span className=\"todo-count\">\n                <strong>0</strong> item left\n            </span>\n            <ul className=\"filters\">\n                <li>\n                    <Link\n                        className={\n                            window.location.pathname === '/'\n                                ? 'selected'\n                                : undefined\n                        }\n                        to=\"/\"\n                    >\n                        All\n                    </Link>\n                </li>\n                <li>\n                    <Link\n                        className={\n                            window.location.pathname === '/active'\n                                ? 'selected'\n                                : undefined\n                        }\n                        to=\"/active\"\n                    >\n                        Active\n                    </Link>\n                </li>\n                <li>\n                    <Link\n                        className={\n                            window.location.pathname === '/completed'\n                                ? 'completed'\n                                : undefined\n                        }\n                        to=\"/completed\"\n                    >\n                        Completed\n                    </Link>\n                </li>\n            </ul>\n            <button className=\"clear-completed\">Clear completed</button>\n        </footer>\n    ) : null;\n};\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { CREATE_TODO_MUTATION, TODO_LIST_QUERY } from '../querys';\n\nimport '../styles/App.css';\n\nconst Header = _ => {\n    const [state, setState] = useState({ text: '' });\n    const [createTodo] = useMutation(CREATE_TODO_MUTATION);\n\n    return (\n        <header className=\"header\">\n            <h1>todos</h1>\n            <input\n                className=\"new-todo\"\n                onChange={({ target }) => setState({ text: target.value })}\n                onKeyPress={({ key }) => {\n                    if (key === 'Enter') {\n                        const { text } = state;\n                        createTodo({\n                            variables: { data: { text, completed: false } },\n                            refetchQueries: [{ query: TODO_LIST_QUERY }],\n                        });\n\n                        setState({ text: '' });\n                    }\n                }}\n                value={state.text}\n                placeholder=\"What needs to be done?\"\n            />\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\n\nimport { useMutation } from '@apollo/react-hooks';\nimport {\n    TODO_LIST_QUERY,\n    DELETE_TODO_MUTATION,\n    TOGGLE_TODO_MUTATION,\n    REMOVE_USER_TODO_MUTATION,\n} from '../querys';\n\nexport default function Todo({ todo, toggleModal }) {\n    const [removeTodo] = useMutation(DELETE_TODO_MUTATION);\n    const [toggleTodo] = useMutation(TOGGLE_TODO_MUTATION);\n\n    const [deleteUserOnTodo] = useMutation(REMOVE_USER_TODO_MUTATION);\n\n    const handleClick = name => {\n        // console.log('delete to: ', name, ' on: ', todo.id);\n        deleteUserOnTodo({\n            variables: { id: todo.id, user: name },\n            refetchQueries: [{ query: TODO_LIST_QUERY }],\n        });\n    };\n\n    return (\n        <li key={todo.id} className={todo.completed ? 'completed' : undefined}>\n            <div className=\"view\">\n                <input\n                    className=\"toggle\"\n                    onChange={() =>\n                        toggleTodo({\n                            variables: {\n                                id: todo.id,\n                                completed: !todo.completed,\n                            },\n                            refetchQueries: [{ query: TODO_LIST_QUERY }],\n                        })\n                    }\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                />\n                <label>{todo.text}</label>\n                <button\n                    onClick={() =>\n                        removeTodo({\n                            variables: { id: todo.id },\n                            refetchQueries: [{ query: TODO_LIST_QUERY }],\n                        })\n                    }\n                    className=\"destroy\"\n                />\n                <button\n                    className=\"add-user\"\n                    onClick={_ => toggleModal(todo.id)}\n                >\n                    +\n                </button>\n\n                <ul className=\"users\">\n                    {todo.users &&\n                        todo.users.map((i, idx) => (\n                            <li\n                                className=\"user\"\n                                onClick={_ => handleClick(i)}\n                                key={idx}\n                            >\n                                {i.split('')[0].toUpperCase()}\n                                <span className=\"tooltiptext\">{i}</span>\n                            </li>\n                        ))}\n                </ul>\n            </div>\n        </li>\n    );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { useLocation } from 'react-router-dom';\n\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport {\n    TODO_LIST_QUERY,\n    TOGGLE_TODO_MUTATION,\n    USERS_QUERY,\n    ADD_USER_TO_TODO_MUTATION,\n} from '../querys';\n\nimport Todo from './Todo';\n\nconst Main = _ => {\n    const { data, loading } = useQuery(TODO_LIST_QUERY);\n    const { data: users } = useQuery(USERS_QUERY);\n\n    const [toggleTodo] = useMutation(TOGGLE_TODO_MUTATION);\n    const [addUserToTodo] = useMutation(ADD_USER_TO_TODO_MUTATION);\n\n    const [todos, setTodos] = useState([]);\n    const [modal, setModal] = useState(false);\n    const [allUsers, setAllUsers] = useState([]);\n    const [currentTodoId, setCurrentTodoId] = useState('');\n\n    useEffect(\n        _ => {\n            if (users && users.users) {\n                setAllUsers(users.users);\n            }\n        },\n        [users]\n    );\n\n    useLocation();\n\n    useEffect(\n        _ => {\n            if (data && data.todosList.items.length >= 0) {\n                setTodos(data.todosList.items);\n            }\n        },\n        [data]\n    );\n\n    const toggleAllTodos = ({ completed }) => {\n        todos.forEach(todo => {\n            toggleTodo({\n                variables: { id: todo.id, completed },\n                refetchQueries: [{ query: TODO_LIST_QUERY }],\n            });\n        });\n    };\n\n    const toggleModal = todoId => {\n        setModal(!modal);\n\n        if (typeof todoId === 'string') {\n            setCurrentTodoId(todoId);\n        }\n    };\n\n    const handleClick = async e => {\n        const { innerText } = e.target;\n        // console.log('agregar a: ', innerText, ' a esta tarea: ', currentTodoId);\n\n        addUserToTodo({\n            variables: { id: currentTodoId, user: innerText },\n            refetchQueries: [{ query: TODO_LIST_QUERY }],\n        });\n        toggleModal();\n    };\n\n    if (loading) {\n        return <h4> Loading ...</h4>;\n    }\n\n    return todos && todos.length ? (\n        <section className=\"main\">\n            {modal && (\n                <div className=\"modal\">\n                    <div className=\"modal-body\">\n                        <span className=\"modal-close\" onClick={toggleModal}>\n                            X\n                        </span>\n\n                        <ul>\n                            {allUsers.map(e => (\n                                <li onClick={handleClick} key={e.name}>\n                                    {e.name}\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n            )}\n\n            <input\n                className=\"toggle-all\"\n                type=\"checkbox\"\n                onChange={() =>\n                    todos.some(todo => todo.completed === false)\n                        ? toggleAllTodos({ completed: true })\n                        : toggleAllTodos({ completed: false })\n                }\n                checked={false}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <ul className=\"todo-list\">\n                {todos\n                    .filter(todo => {\n                        if (window.location.pathname === '/completed') {\n                            return todo.completed;\n                        }\n                        if (window.location.pathname === '/active') {\n                            return !todo.completed;\n                        }\n                        return true;\n                    })\n                    .map(todo => (\n                        <Todo\n                            key={todo.id}\n                            todo={todo}\n                            toggleModal={toggleModal}\n                        />\n                    ))}\n            </ul>\n        </section>\n    ) : null;\n};\nexport default Main;\n","import React, { useState } from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from 'react-router-dom';\n\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Login from './components/Login';\n\nimport './styles/todo.css';\n\nconst App = _ => {\n    const [isAuth, setAuth] = useState(false);\n\n    return (\n        <Router>\n            <Switch>\n                <Route\n                    exact\n                    path=\"/login\"\n                    component={_ => Login({ isAuth, setAuth })}\n                />\n\n                {isAuth ? (\n                    <Route\n                        path=\"/\"\n                        component={_ => (\n                            <div className=\"todoapp\">\n                                <Header />\n                                <Main />\n                                <Footer />\n                            </div>\n                        )}\n                    />\n                ) : (\n                    <Redirect to=\"/login\" />\n                )}\n            </Switch>\n        </Router>\n    );\n};\n\nexport default App;\n","import React, { useState } from 'react';\n\nimport '../styles/login.css';\nimport { useEffect } from 'react';\nimport { useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport { USER_QUERY, ADD_USER_MUTATION } from '../querys';\nimport { useHistory } from 'react-router-dom';\n\nexport default function Login({ setAuth, isAuth }) {\n    const history = useHistory();\n    const [email, setEmail] = useState('');\n    // const [errors, setErrors] = useState([\n    //     'Email format invalid',\n    //     'Password empty',\n    // ]);\n    const [errors, setErrors] = useState([]);\n    const [showName, setShowName] = useState(false);\n    const [fullName, setFullName] = useState('');\n    const [password, setPassword] = useState(undefined);\n    const [pass, setPass] = useState(undefined);\n\n    const [getUser, { data }] = useLazyQuery(USER_QUERY, {\n        variables: { email, password: pass },\n    });\n\n    const [addUser] = useMutation(ADD_USER_MUTATION);\n\n    useEffect(\n        _ => {\n            if (isAuth) {\n                history.push('/');\n            }\n        },\n        // eslint-disable-next-line\n        [isAuth]\n    );\n\n    useEffect(\n        _ => {\n            // User not registered, show name field\n            if (data && data.user === null) {\n                setShowName(true);\n            }\n\n            if (data && data.user && data.user.logged === true) {\n                // console.log('correct password');\n                setAuth(true);\n            } else if (data && data.user && data.user.logged === false) {\n                errors.push('Incorrect password');\n                setErrors([...errors]);\n            }\n        },\n        // eslint-disable-next-line\n        [data]\n    );\n\n    useEffect(\n        _ => {\n            setErrors([]);\n        },\n        [email, password, fullName]\n    );\n\n    const handleSubmit = async e => {\n        e.preventDefault();\n\n        if (errors.length > 0) {\n            setErrors([]);\n            return;\n        }\n\n        if (password === undefined) {\n            errors.push('Password empty');\n            setErrors([...errors]);\n        }\n\n        if (showName && fullName === '') {\n            errors.push('Full name empty');\n            setErrors([...errors]);\n        }\n\n        if (errors.length === 0) {\n            // console.log('submit');\n\n            if (showName) {\n                // New user\n                console.log('new user');\n                const res = await addUser({\n                    variables: {\n                        data: {\n                            name: fullName,\n                            email,\n                            password,\n                        },\n                    },\n                });\n\n                if (res.data.addUser.id) {\n                    console.log('user registered');\n                    setAuth(true);\n                }\n            } else {\n                // Login\n                setPass(password);\n                getUser();\n            }\n        }\n    };\n\n    const handleBlurEmail = e => {\n        let re = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\n\n        if (email === '') {\n            errors.push('Email empty');\n            setErrors([...errors]);\n        } else if (!re.test(String(email).toLowerCase())) {\n            errors.push('Email format invalid');\n            setErrors([...errors]);\n        } else {\n            setErrors([]);\n            // setShowName(true);\n            getUser();\n        }\n    };\n\n    return (\n        <div className=\"login-container\">\n            <div className=\"login\">\n                <form onSubmit={handleSubmit}>\n                    <input\n                        type=\"email\"\n                        placeholder=\"Email\"\n                        onBlur={handleBlurEmail}\n                        onChange={e => setEmail(e.target.value)}\n                    />\n                    <input\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        onChange={e => setPassword(e.target.value)}\n                    />\n\n                    {showName && (\n                        <input\n                            type=\"text\"\n                            placeholder=\"Full name\"\n                            onChange={e => setFullName(e.target.value)}\n                        />\n                    )}\n\n                    {errors.length > 0 ? (\n                        <div className=\"messages\">\n                            {errors.map((e, i) => (\n                                <p key={i}>{e}</p>\n                            ))}\n                        </div>\n                    ) : null}\n\n                    <button type=\"submit\">Login</button>\n                </form>\n            </div>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache();\n\n// const API_ENDPOINT_URI = 'https://api.8base.com/ck7b04f94000508l0f5lrfo73';\nconst API_ENDPOINT_URI = 'http://localhost:8080/graphql';\n\n// const API_ENDPOINT_URI = 'https://graphql-pokemon.now.sh/';\n\nconst link = new HttpLink({\n    uri: API_ENDPOINT_URI,\n});\n\nconst client = new ApolloClient({\n    cache,\n    link,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}